@model TrazaNet.DataLayer.TIPORED

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>TIPORED</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.IDTIPORED)

        <div class="form-group">
            @Html.LabelFor(model => model.NOMTIPORED, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.NOMTIPORED, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.NOMTIPORED, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDDENIER, "IDDENIER", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDDENIER", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDDENIER, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDMEDIDARED, "IDMEDIDARED", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDMEDIDARED", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDMEDIDARED, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDTELA, "IDTELA", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDTELA", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDTELA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDABERTURARED, "IDABERTURARED", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDABERTURARED", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDABERTURARED, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDFUNCIONRED, "IDFUNCIONRED", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDFUNCIONRED", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDFUNCIONRED, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IDFIGURA, "IDFIGURA", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("IDFIGURA", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.IDFIGURA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZIPPET, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.ZIPPET)
                    @Html.ValidationMessageFor(model => model.ZIPPET, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TENSIONSTANDAR, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TENSIONSTANDAR, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TENSIONSTANDAR, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TESNSIONMINIMA, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TESNSIONMINIMA, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TESNSIONMINIMA, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PERIODOESTANDAR, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PERIODOESTANDAR, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.PERIODOESTANDAR, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
